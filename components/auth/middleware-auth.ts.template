import type { MiddlewareHandler } from 'hono';
import type { PostgresJsDatabase } from 'drizzle-orm/postgres-js';
import { logger } from '@app/utils/logger';
import { AuthService } from '../services/auth';

export function createAuthMiddleware(db: PostgresJsDatabase): MiddlewareHandler {
  const authService = new AuthService(db);

  return async (c, next) => {
    try {
      const authHeader = c.req.header('Authorization');

      if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return con({ error: 'Missing or invalid authorization header' }, 401);
      }

      const token = authHeader.substring(7);
      const user = await authService.verifyAccessToken(token);

      // Add user to context
      c.set('user', user);

      await next();
    } catch (error) {
      logger.error('Authentication failed', { error });
      return con({ error: 'Invalid or expired token' }, 401);
    }
  };
}
