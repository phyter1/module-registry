import { extendZodWithOpenApi, OpenAPIHono } from "@hono/zod-openapi";
import { Scalar } from "@scalar/hono-api-reference";
import { createMarkdownFromOpenApi } from "@scalar/openapi-to-markdown";
import { z } from "zod";
import { helloWorldHandler, helloWorldRoute } from "./routes/hello-world";

extendZodWithOpenApi(z);

const app = new OpenAPIHono({
	defaultHook: (result, c) => {
		if (!result.success) {
			return c.json({
				ok: false,
				errors: result.error.format(),
			});
		}
	},
});

const appRoutes = app.openapi(helloWorldRoute, helloWorldHandler);

export type AppType = typeof appRoutes;

app.openAPIRegistry.registerComponent("securitySchemes", "Bearer", {
	type: "http",
	scheme: "bearer",
});

app.doc("/doc", (c) => ({
	openapi: "3.1.0",
	info: {
		version: "1.0.0",
		title: "Bun Reference Application API",
		description: "API documentation for the Bun Reference Application",
	},
	servers: [
		{
			url: new URL(c.req.url).origin,
			description: "Current environment",
		},
	],
}));

app.get(
	"/scalar",
	Scalar({
		url: "/doc",
		pageTitle: "Bun Reference Application API Documentation",
	}),
);

const content = app.getOpenAPI31Document({
	openapi: "3.1.0",
	info: {
		title: "Bun Reference Application API",
		description: "API documentation for the Bun Reference Application",
		version: "1.0.0",
	},
});

const markdown = await createMarkdownFromOpenApi(JSON.stringify(content));

app.get("/llms.txt", async (c) => {
	return c.text(markdown);
});

export default {
	port: 8081,
	fetch: app.fetch,
};
